<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: temporal/api/workflowservice/v1/request_response.proto

namespace Temporal\Api\Workflowservice\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>temporal.api.workflowservice.v1.StartWorkflowExecutionResponse</code>
 */
class StartWorkflowExecutionResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>string run_id = 1;</code>
     */
    protected $run_id = '';
    /**
     * When `request_eager_execution` is set on the `StartWorkflowExecutionRequest`, the server - if supported - will
     * return the first workflow task to be eagerly executed.
     * The caller is expected to have a worker available to process the task.
     *
     * Generated from protobuf field <code>.temporal.api.workflowservice.v1.PollWorkflowTaskQueueResponse eager_workflow_task = 2;</code>
     */
    protected $eager_workflow_task = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $run_id
     *     @type \Temporal\Api\Workflowservice\V1\PollWorkflowTaskQueueResponse $eager_workflow_task
     *           When `request_eager_execution` is set on the `StartWorkflowExecutionRequest`, the server - if supported - will
     *           return the first workflow task to be eagerly executed.
     *           The caller is expected to have a worker available to process the task.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Temporal\Api\Workflowservice\V1\RequestResponse::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string run_id = 1;</code>
     * @return string
     */
    public function getRunId()
    {
        return $this->run_id;
    }

    /**
     * Generated from protobuf field <code>string run_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setRunId($var)
    {
        GPBUtil::checkString($var, True);
        $this->run_id = $var;

        return $this;
    }

    /**
     * When `request_eager_execution` is set on the `StartWorkflowExecutionRequest`, the server - if supported - will
     * return the first workflow task to be eagerly executed.
     * The caller is expected to have a worker available to process the task.
     *
     * Generated from protobuf field <code>.temporal.api.workflowservice.v1.PollWorkflowTaskQueueResponse eager_workflow_task = 2;</code>
     * @return \Temporal\Api\Workflowservice\V1\PollWorkflowTaskQueueResponse|null
     */
    public function getEagerWorkflowTask()
    {
        return $this->eager_workflow_task;
    }

    public function hasEagerWorkflowTask()
    {
        return isset($this->eager_workflow_task);
    }

    public function clearEagerWorkflowTask()
    {
        unset($this->eager_workflow_task);
    }

    /**
     * When `request_eager_execution` is set on the `StartWorkflowExecutionRequest`, the server - if supported - will
     * return the first workflow task to be eagerly executed.
     * The caller is expected to have a worker available to process the task.
     *
     * Generated from protobuf field <code>.temporal.api.workflowservice.v1.PollWorkflowTaskQueueResponse eager_workflow_task = 2;</code>
     * @param \Temporal\Api\Workflowservice\V1\PollWorkflowTaskQueueResponse $var
     * @return $this
     */
    public function setEagerWorkflowTask($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Workflowservice\V1\PollWorkflowTaskQueueResponse::class);
        $this->eager_workflow_task = $var;

        return $this;
    }

}

