<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: temporal/api/enums/v1/task_queue.proto

namespace Temporal\Api\Enums\V1;

use UnexpectedValueException;

/**
 * Specifies which category of tasks may reach a worker on a versioned task queue.
 * Used both in a reachability query and its response.
 *
 * Protobuf type <code>temporal.api.enums.v1.TaskReachability</code>
 */
class TaskReachability
{
    /**
     * Generated from protobuf enum <code>TASK_REACHABILITY_UNSPECIFIED = 0;</code>
     */
    const TASK_REACHABILITY_UNSPECIFIED = 0;
    /**
     * There's a possiblity for a worker to receive new workflow tasks. Workers should *not* be retired.
     *
     * Generated from protobuf enum <code>TASK_REACHABILITY_NEW_WORKFLOWS = 1;</code>
     */
    const TASK_REACHABILITY_NEW_WORKFLOWS = 1;
    /**
     * There's a possiblity for a worker to receive existing workflow and activity tasks from existing workflows. Workers
     * should *not* be retired.
     * This enum value does not distinguish between open and closed workflows.
     *
     * Generated from protobuf enum <code>TASK_REACHABILITY_EXISTING_WORKFLOWS = 2;</code>
     */
    const TASK_REACHABILITY_EXISTING_WORKFLOWS = 2;
    /**
     * There's a possiblity for a worker to receive existing workflow and activity tasks from open workflows. Workers
     * should *not* be retired.
     *
     * Generated from protobuf enum <code>TASK_REACHABILITY_OPEN_WORKFLOWS = 3;</code>
     */
    const TASK_REACHABILITY_OPEN_WORKFLOWS = 3;
    /**
     * There's a possiblity for a worker to receive existing workflow tasks from closed workflows. Workers may be
     * retired dependending on application requirements. For example, if there's no need to query closed workflows.
     *
     * Generated from protobuf enum <code>TASK_REACHABILITY_CLOSED_WORKFLOWS = 4;</code>
     */
    const TASK_REACHABILITY_CLOSED_WORKFLOWS = 4;

    private static $valueToName = [
        self::TASK_REACHABILITY_UNSPECIFIED => 'TASK_REACHABILITY_UNSPECIFIED',
        self::TASK_REACHABILITY_NEW_WORKFLOWS => 'TASK_REACHABILITY_NEW_WORKFLOWS',
        self::TASK_REACHABILITY_EXISTING_WORKFLOWS => 'TASK_REACHABILITY_EXISTING_WORKFLOWS',
        self::TASK_REACHABILITY_OPEN_WORKFLOWS => 'TASK_REACHABILITY_OPEN_WORKFLOWS',
        self::TASK_REACHABILITY_CLOSED_WORKFLOWS => 'TASK_REACHABILITY_CLOSED_WORKFLOWS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

