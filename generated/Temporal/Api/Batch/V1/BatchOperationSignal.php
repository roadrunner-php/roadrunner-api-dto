<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: temporal/api/batch/v1/message.proto

namespace Temporal\Api\Batch\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * BatchOperationSignal sends signals to batch workflows.
 * Keep the parameter in sync with temporal.api.workflowservice.v1.SignalWorkflowExecutionRequest.
 *
 * Generated from protobuf message <code>temporal.api.batch.v1.BatchOperationSignal</code>
 */
class BatchOperationSignal extends \Google\Protobuf\Internal\Message
{
    /**
     * The workflow author-defined name of the signal to send to the workflow
     *
     * Generated from protobuf field <code>string signal = 1;</code>
     */
    protected $signal = '';
    /**
     * Serialized value(s) to provide with the signal
     *
     * Generated from protobuf field <code>.temporal.api.common.v1.Payloads input = 2;</code>
     */
    protected $input = null;
    /**
     * Headers that are passed with the signal to the processing workflow.
     * These can include things like auth or tracing tokens.
     *
     * Generated from protobuf field <code>.temporal.api.common.v1.Header header = 3;</code>
     */
    protected $header = null;
    /**
     * The identity of the worker/client
     *
     * Generated from protobuf field <code>string identity = 4;</code>
     */
    protected $identity = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $signal
     *           The workflow author-defined name of the signal to send to the workflow
     *     @type \Temporal\Api\Common\V1\Payloads $input
     *           Serialized value(s) to provide with the signal
     *     @type \Temporal\Api\Common\V1\Header $header
     *           Headers that are passed with the signal to the processing workflow.
     *           These can include things like auth or tracing tokens.
     *     @type string $identity
     *           The identity of the worker/client
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Temporal\Api\Batch\V1\Message::initOnce();
        parent::__construct($data);
    }

    /**
     * The workflow author-defined name of the signal to send to the workflow
     *
     * Generated from protobuf field <code>string signal = 1;</code>
     * @return string
     */
    public function getSignal()
    {
        return $this->signal;
    }

    /**
     * The workflow author-defined name of the signal to send to the workflow
     *
     * Generated from protobuf field <code>string signal = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setSignal($var)
    {
        GPBUtil::checkString($var, True);
        $this->signal = $var;

        return $this;
    }

    /**
     * Serialized value(s) to provide with the signal
     *
     * Generated from protobuf field <code>.temporal.api.common.v1.Payloads input = 2;</code>
     * @return \Temporal\Api\Common\V1\Payloads|null
     */
    public function getInput()
    {
        return $this->input;
    }

    public function hasInput()
    {
        return isset($this->input);
    }

    public function clearInput()
    {
        unset($this->input);
    }

    /**
     * Serialized value(s) to provide with the signal
     *
     * Generated from protobuf field <code>.temporal.api.common.v1.Payloads input = 2;</code>
     * @param \Temporal\Api\Common\V1\Payloads $var
     * @return $this
     */
    public function setInput($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Common\V1\Payloads::class);
        $this->input = $var;

        return $this;
    }

    /**
     * Headers that are passed with the signal to the processing workflow.
     * These can include things like auth or tracing tokens.
     *
     * Generated from protobuf field <code>.temporal.api.common.v1.Header header = 3;</code>
     * @return \Temporal\Api\Common\V1\Header|null
     */
    public function getHeader()
    {
        return $this->header;
    }

    public function hasHeader()
    {
        return isset($this->header);
    }

    public function clearHeader()
    {
        unset($this->header);
    }

    /**
     * Headers that are passed with the signal to the processing workflow.
     * These can include things like auth or tracing tokens.
     *
     * Generated from protobuf field <code>.temporal.api.common.v1.Header header = 3;</code>
     * @param \Temporal\Api\Common\V1\Header $var
     * @return $this
     */
    public function setHeader($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Common\V1\Header::class);
        $this->header = $var;

        return $this;
    }

    /**
     * The identity of the worker/client
     *
     * Generated from protobuf field <code>string identity = 4;</code>
     * @return string
     */
    public function getIdentity()
    {
        return $this->identity;
    }

    /**
     * The identity of the worker/client
     *
     * Generated from protobuf field <code>string identity = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setIdentity($var)
    {
        GPBUtil::checkString($var, True);
        $this->identity = $var;

        return $this;
    }

}

